# GraphQL
schema {
	query: Query
	mutation: Mutation
}

scalar AWSJSON
scalar AWSDate

type Query {
	getCluster(clusterID: ID!): ClusterRedacted
	listCluster(limit: Int, nextToken: String): ClusterConnection
	
	getService(serviceID: ID!, serviceVersion: String!): Service
	listService(serviceID: ID, limit: Int, nextToken: String): ServiceConnection

	getPlatform(platformID: ID!, platformVersion: String!): Platform
	listPlatform(platformID: ID, limit: Int, nextToken: String): PlatformConnection

	getPlatformBinding(clusterID: ID!, platformBindingID: ID!): PlatformBinding
}

type Mutation {
    createAccount: Account

    createCluster(input: CreateClusterInput!): ClusterRedacted
	updateCluster(input: UpdateClusterInput!): ClusterRedacted
	deleteCluster(input: DeleteClusterInput!): ClusterRedacted

	createPrivateCluster(input: CreatePrivateClusterInput!): ClusterRedacted
	updatePrivateCluster(input: UpdatePrivateClusterInput!): ClusterRedacted

	createPlatformBinding(input: CreatePlatformBindingInput!): PlatformBinding
	updatePlatformBinding(input: UpdatePlatformBindingInput!): PlatformBinding
	deletePlatformBinding(input: DeletePlatformBindingInput!): PlatformBinding

	createService(input: CreateServiceInput!): Service
	updateService(input: UpdateServiceInput!): Service
	deleteService(input: DeleteServiceInput!): Service

	createPlatform(input: CreatePlatformInput!): Platform
	updatePlatform(input: UpdatePlatformInput!): Platform
	deletePlatform(input: DeletePlatformInput!): Platform

	createPlatformService(input: CreatePlatformServiceInput!): PlatformService
	updatePlatformService(input: UpdatePlatformServiceInput!): PlatformService
	deletePlatformService(input: DeletePlatformServiceInput!): PlatformService

	createPlatformConfig(input: CreatePlatformConfigInput!): PlatformConfig
	updatePlatformConfig(input: UpdatePlatformConfigInput!): PlatformConfig
	deletePlatformConfig(input: DeletePlatformConfigInput!): PlatformConfig
}


# Account
type Account {
    accountID: ID!
}

# Service
type Service {
    serviceID: ID! # partition key
	serviceVersion: String! # sort key

    name: String!
	description: String

	catalogedDate: AWSDate # global sparse index (only exists if is not owned by an account)

    accountID: ID # only exists if owned by an account
}
# Service Operations
input CreateServiceInput {
	serviceID: ID
	serviceVersion: String!

	name: String!
	description: String
}

input UpdateServiceInput {
	serviceID: ID!
	serviceVersion: String!

	name: String
	description: String
}

input DeleteServiceInput {
	serviceID: ID!
	serviceVersion: String!
}

type ServiceConnection {
	items: [Service]
	nextToken: String
}


# Platform
type Platform {
    platformID: ID! # partition key
	platformVersion: String! # sort key

    name: String!
	description: String

	catalogedDate: AWSDate # global sparse index (only exists if is not owned by an account)

	accountID: ID # only exists if owned by an account

	maxAPIVersion: String!
	minAPIVersion: String!

	services: [PlatformService!]!
	configs: [PlatformConfig!]!
}

type PlatformService {
    platformID: ID! # partition key
	platformServiceID: ID! # sort key
	
	platformVersion: String! # LSI

    serviceID: ID!
    serviceVersion: String!

	accountID: ID # only exists if owned by an account

    name: String!
    namespace: String!
    dependencies: [ID!]! # contains platformServiceIDs
    delete_dependencies: [ID!]! # contains platformServiceIDs
} 
# Platform Operations
type PlatformConnection {
	items: [Platform]
	nextToken: String
}

input CreatePlatformInput {
	platformVersion: String!

    name: String!
	description: String
}
input UpdatePlatformInput {
    name: String
	description: String
}
input DeletePlatformInput {
    platformID: ID!
	platformVersion: String!
}

input CreatePlatformServiceInput {
    platformID: ID!
	platformVersion: String!

    serviceID: ID!
    serviceVersion: String!

    name: String!
    namespace: String!
    dependencies: [ID!]!
    delete_dependencies: [ID!]!
}
input UpdatePlatformServiceInput {
    platformID: ID!
	platformServiceID: ID!

    serviceID: ID
    serviceVersion: String

    name: String
    namespace: String
    dependencies: [ID!]!
    delete_dependencies: [ID!]!
}
input DeletePlatformServiceInput {
    platformID: ID!
	platformServiceID: ID!
}




# PlatformConfig
type PlatformConfig {
    platformID: ID! # partition key
    platformConfigID: ID! # sort key

	platformVersion: String! # LSI

	name: String!
    config: AWSJSON!

	accountID: ID # only exists if owned by an account
}
# PLatformConfig Operations
input CreatePlatformConfigInput {
    platformID: ID!
	platformVersion: String!

	name: String!
    config: AWSJSON!
}
input UpdatePlatformConfigInput {
    platformID: ID!
    platformConfigID: ID!

	name: String
    config: AWSJSON
}
input DeletePlatformConfigInput {
	platformID: ID!
    platformConfigID: ID!
}


# Cluster
type Cluster {
    accountID: ID! # partition key
    clusterID: ID! # sort key

    name: String!
    token: String!
	
	ca: String
    server: String

	privateTunnelToken: String

    bindings: [PlatformBinding!]!
}

type PlatformBinding {
    # clusterID: ID! # partition key
	platformBindingID: ID! # sort key

	# accountID: ID!

    platformID: ID!
    platformVersion: String!
    platformConfigID: ID!

	status: PlatformBindingStatus!
}

enum PlatformBindingStatus{
	Pending,
	Succeeded,
	Failed,
	Error
}
# Cluster Operations
input CreateClusterInput {
    name: String!
    ca: String!
    token: String!
    server: String!
	apiVersion: String!
	context: AWSJSON
}
input UpdateClusterInput {
	clusterID: ID!
    name: String
    ca: String
    token: String
    server: String
	apiVersion: String
	context: AWSJSON
}
input DeleteClusterInput {
	clusterID: ID!
}

input CreatePrivateClusterInput {
    name: String!
    token: String!
	privateTunnelToken: String!
	apiVersion: String!
	context: AWSJSON
}
input UpdatePrivateClusterInput {
	clusterID: ID!
    name: String
    token: String
	privateTunnelToken: String
	apiVersion: String
	context: AWSJSON
}

type ClusterRedacted {
    accountID: ID!
    clusterID: ID!

    name: String!
	apiVersion: String!

    ca: String
    server: String

	privateTunnelToken: String

	context: AWSJSON

    bindings: [PlatformBinding!]!
}
type ClusterConnection {
	items: [ClusterRedacted]
	nextToken: String
}

input CreatePlatformBindingInput {
	clusterID: ID!

    platformID: ID!
    platformVersion: String!
    platformConfigID: ID!
}
input UpdatePlatformBindingInput {
	clusterID: ID!
	platformBindingID: ID!

    platformID: ID
    platformVersion: String
    platformConfigID: ID
}
input DeletePlatformBindingInput {
	clusterID: ID!
	platformBindingID: ID!
}



# Filters
input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}


input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}
